#include <stdio.h>
#include <stdlib.h>
#include <time.h>
long long int swaps = 0;
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
    swaps++;
}

void bubbleSort(int arr[], int n)
{
    int i, j;
    for (i = 0; i < n-1; i++)
        for (j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1])
                swap(&arr[j], &arr[j+1]);
}

int main()
{
    FILE *fp;
    int arr1[100000], size = 0, j = 0;
    fp = fopen("E:/input4.txt","r");

    do
    {
        fscanf(fp, "%d", &arr1[j++]);
        size++;
    }
    while(getc(fp) != EOF);
    fclose (fp);

    clock_t start=clock();
    bubbleSort(arr1, size);
    clock_t end=clock();

    double total = (double)(end-start)/CLOCKS_PER_SEC;

    printf("number of elements: %d\n", size);
    printf("time taken :  %.5f seconds\n",total);
    printf("number of swaps: %ll", swaps);

    fp = fopen("E:/result.txt","w");
    int k = 0;
    while(k < size)
    {
        fprintf(fp, "%d ",arr1[k++]);
    }
    fclose(fp);
    return 0;
}


-------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
long long int divisions = 0;
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0,j=0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        int m = l + (r - l) / 2;
        divisions++;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

int main()
{
    FILE *fp;
    int arr1[100000], size = 0, j = 0;
    fp = fopen("E:/input3.txt","r");

    do
    {
        fscanf(fp, "%d", &arr1[j++]);
        size++;
    }
    while(getc(fp) != EOF);
    fclose (fp);

    clock_t start=clock();
    mergeSort(arr1,0, size-1);
    clock_t end=clock();

    double total = (double)(end-start)/CLOCKS_PER_SEC;

    printf("number of elements: %d\n", size);
    printf("time taken :  %.9f seconds\n",total);
    printf("number of divisions: %lld", divisions);

    fp = fopen("E:/result.txt","w");
    int k = 0;
    while(k < size)
    {
        fprintf(fp, "%d ",arr1[k++]);
    }
    fclose(fp);
    return 0;
}
------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition (int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main()
{
    FILE *fp;
    int arr1[100000], size = 0, j = 0;
    fp = fopen("E:/input4.txt","r");

    do
    {
        fscanf(fp, "%d", &arr1[j++]);
        size++;
    }
    while(getc(fp) != EOF);
    fclose (fp);

    clock_t start=clock();
    quickSort(arr1,0, size-1);
    clock_t end=clock();

    double total = (double)(end-start)/CLOCKS_PER_SEC;

    printf("number of elements: %d\n", size);
    printf("time taken :  %.9f seconds\n",total);
    //printf("number of divisions: %lld", divisions);

    fp = fopen("E:/result.txt","w");
    int k = 0;
    while(k < size)
    {
        fprintf(fp, "%d ",arr1[k++]);
    }
    fclose(fp);
    return 0;
}
